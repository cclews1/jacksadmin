[{"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\index.js":"1","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\reportWebVitals.js":"2","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\App.js":"3","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\Background\\index.js":"4","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\theme.js":"5","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\NavTemplate\\index.js":"6","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\firebase.js":"7","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\AuthContext.js":"8","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\index.js":"9","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\Login\\index.js":"10","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\AdminContext.js":"11","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\PageWrap.js":"12","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\AdminPages\\Edit\\index.js":"13","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\AdminPages\\Add\\index.js":"14","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\AdminPages\\Inventory\\index.js":"15","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\FileUpload.js":"16","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\AdminPages\\Inventory\\Table.js":"17","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\firebaseUtilities.js":"18"},{"size":494,"mtime":1612601951262,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":1394,"mtime":1615010425334,"results":"22","hashOfConfig":"20"},{"size":820,"mtime":1615015314115,"results":"23","hashOfConfig":"20"},{"size":511,"mtime":1611829564005,"results":"24","hashOfConfig":"20"},{"size":5139,"mtime":1615016174765,"results":"25","hashOfConfig":"20"},{"size":598,"mtime":1614992787483,"results":"26","hashOfConfig":"20"},{"size":87,"mtime":1614992787466,"results":"27","hashOfConfig":"20"},{"size":3077,"mtime":1615175478840,"results":"28","hashOfConfig":"20"},{"size":3707,"mtime":1614992787478,"results":"29","hashOfConfig":"20"},{"size":88,"mtime":1614992787467,"results":"30","hashOfConfig":"20"},{"size":480,"mtime":1614992787476,"results":"31","hashOfConfig":"20"},{"size":6186,"mtime":1614992787471,"results":"32","hashOfConfig":"20"},{"size":4292,"mtime":1615174812149,"results":"33","hashOfConfig":"20"},{"size":720,"mtime":1614992787474,"results":"34","hashOfConfig":"20"},{"size":6693,"mtime":1614992787475,"results":"35","hashOfConfig":"20"},{"size":6678,"mtime":1614992787472,"results":"36","hashOfConfig":"20"},{"size":8818,"mtime":1615167769165,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"18j53cj",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\index.js",[],["81","82"],"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\reportWebVitals.js",[],"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\App.js",[],"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\Background\\index.js",[],"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\theme.js",[],"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\NavTemplate\\index.js",[],"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\firebase.js",[],"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\AuthContext.js",[],"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\index.js",["83"],"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\Login\\index.js",["84"],"import Background from '../../Background';\r\nimport { AuthContext } from '../../../AuthContext';\r\nimport {\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Button,\r\n  InputAdornment,\r\n} from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { useState, useContext } from 'react';\r\nimport { Email, VpnKey } from '@material-ui/icons';\r\nimport firebase from '../../../firebase';\r\n\r\nconst useStyles = makeStyles((style) => ({\r\n  container: {\r\n    padding: '1rem',\r\n    height: '100vh',\r\n    width: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  title: {\r\n    margin: '1rem 0',\r\n  },\r\n  login: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '1rem',\r\n  },\r\n  jacksText: {\r\n    fontFamily: \"'Roboto Slab', serif\",\r\n  },\r\n  inputWrapper: {\r\n    margin: '0.5rem 0',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  button: {\r\n    margin: '1rem 0',\r\n  },\r\n}));\r\n\r\nexport default function Login() {\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState({\r\n    email: '',\r\n    password: '',\r\n    errorMessage: '',\r\n  });\r\n  const { useCredentials } = useContext(AuthContext);\r\n\r\n  const [credentials, setCredentials] = useCredentials;\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    const { email, password } = values;\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((userCredentials) => {\r\n        console.log(userCredentials);\r\n        setCredentials({ email: userCredentials.user.email });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <Background loggedIn={false}>\r\n      <div className={classes.container}>\r\n        <form onSubmit={handleSubmit}>\r\n          <Paper className={classes.login}>\r\n            <Typography\r\n              variant='h5'\r\n              className={classes.jacksText + ' ' + classes.title}\r\n            >\r\n              Admin Login\r\n            </Typography>\r\n            <div className={classes.inputWrapper}>\r\n              <TextField\r\n                label='Email'\r\n                value={values.email}\r\n                onChange={(e) =>\r\n                  setValues({ ...values, email: e.target.value })\r\n                }\r\n                type='email'\r\n                variant='outlined'\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment>\r\n                      <Email />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n            <div className={classes.inputWrapper}>\r\n              <TextField\r\n                onChange={(e) =>\r\n                  setValues({ ...values, password: e.target.value })\r\n                }\r\n                type='password'\r\n                label='Password'\r\n                variant='outlined'\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment>\r\n                      <VpnKey />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n            {values.errorMessage ? (\r\n              <Alert severity='error'>{values.errorMessage}</Alert>\r\n            ) : null}\r\n            <Button\r\n              type='submit'\r\n              variant='contained'\r\n              color='primary'\r\n              className={classes.button + ' ' + classes.jacksText}\r\n            >\r\n              Login\r\n            </Button>\r\n          </Paper>\r\n        </form>\r\n      </div>\r\n    </Background>\r\n  );\r\n}\r\n","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\AdminContext.js",[],"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\PageWrap.js",[],"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\AdminPages\\Edit\\index.js",["85","86","87"],"import { useState, useContext, useEffect } from 'react';\r\nimport {\r\n  Typography,\r\n  makeStyles,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  Button,\r\n} from '@material-ui/core';\r\nimport { Publish, DeleteForever } from '@material-ui/icons';\r\nimport { AdminContext } from '../../AdminContext';\r\nimport FileUpload from '../../FileUpload';\r\nimport {\r\n  update,\r\n  pullInventory,\r\n  removeVehicle,\r\n} from '../../../../firebaseUtilities';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heading: {\r\n    fontFamily: theme.typography.jackFont,\r\n  },\r\n  pictureHeading: {\r\n    marginTop: '1rem',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  formContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    maxWidth: theme.breakpoints.values.sm,\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    maxWidth: theme.breakpoints.values.sm,\r\n  },\r\n  textField: {\r\n    margin: '0.5rem',\r\n  },\r\n  descriptionField: {\r\n    width: '14rem',\r\n  },\r\n  imageCard: {\r\n    width: '100%',\r\n  },\r\n  cardMedia: {\r\n    height: 200,\r\n    width: 300,\r\n    maxWidth: '100%',\r\n  },\r\n  buttonsWrapper: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  deleteButton: {\r\n    width: '100%',\r\n    marginTop: '1rem',\r\n  },\r\n}));\r\n\r\nfunction Edit() {\r\n  const classes = useStyles();\r\n  const context = useContext(AdminContext);\r\n  const [location, setLocation] = context.location;\r\n  const [editVehicle, setEditVehicle] = context.editVehicle;\r\n  const [inventory, setInventory] = context.inventory;\r\n  const [message, setMessage] = context.message;\r\n  const [editValues, setEditValues] = useState(editVehicle);\r\n  const [newImages, setNewImages] = useState([]);\r\n  const [prevImages, setPrevImages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (inventory) {\r\n      setEditValues(editVehicle);\r\n      setPrevImages(editVehicle.images);\r\n      setNewImages([]);\r\n    }\r\n  }, [editVehicle, inventory]);\r\n\r\n  async function changeVehicle(e) {\r\n    await setEditVehicle(e.target.value);\r\n  }\r\n\r\n  function handleChange(e, field) {\r\n    setEditValues({ ...editValues, [field]: e.target.value });\r\n  }\r\n\r\n  async function handleSubmit() {\r\n    const userMessage = await update(\r\n      newImages,\r\n      editValues,\r\n      prevImages,\r\n      editVehicle\r\n    );\r\n    setEditVehicle(inventory[0]);\r\n    setMessage({ ...userMessage, open: true });\r\n    await pullInventory(context);\r\n  }\r\n\r\n  async function handleDelete() {\r\n    const userMessage = await removeVehicle(editVehicle);\r\n    setMessage({ ...userMessage, open: true });\r\n    await pullInventory(context);\r\n    setLocation('inventory');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Typography className={classes.heading} variant='h5'>\r\n        Edit Vehicle\r\n      </Typography>\r\n      {inventory && inventory[0] ? (\r\n        <div className={classes.formContainer}>\r\n          <FormControl className={classes.formControl} color='secondary'>\r\n            <InputLabel>Vehicle</InputLabel>\r\n            <Select value={editVehicle} onChange={changeVehicle}>\r\n              {inventory.map((car) => {\r\n                return (\r\n                  <MenuItem value={car} key={car.id}>\r\n                    {car.year} {car.make} {car.model}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n          <div className={classes.form}>\r\n            <TextField\r\n              className={classes.textField}\r\n              value={editValues.make}\r\n              label='Make'\r\n              color='secondary'\r\n              onChange={(e) => handleChange(e, 'make')}\r\n            />\r\n            <TextField\r\n              className={classes.textField}\r\n              value={editValues.model}\r\n              color='secondary'\r\n              label='Model'\r\n              onChange={(e) => handleChange(e, 'model')}\r\n            />\r\n            <TextField\r\n              className={classes.textField}\r\n              value={editValues.year}\r\n              color='secondary'\r\n              label='Year'\r\n              type='number'\r\n              onChange={(e) => handleChange(e, 'year')}\r\n            />\r\n            <TextField\r\n              className={classes.textField}\r\n              value={editValues.price}\r\n              color='secondary'\r\n              label='Price'\r\n              type='number'\r\n              onChange={(e) => handleChange(e, 'price')}\r\n            />\r\n            <TextField\r\n              className={classes.textField}\r\n              value={editValues.miles}\r\n              color='secondary'\r\n              label='Mileage'\r\n              type='number'\r\n              onChange={(e) => handleChange(e, 'miles')}\r\n            />\r\n            <TextField\r\n              className={classes.textField + ' ' + classes.descriptionField}\r\n              value={editValues.description}\r\n              color='secondary'\r\n              label='Description'\r\n              multiline\r\n              type='text'\r\n              onChange={(e) => handleChange(e, 'description')}\r\n            />\r\n          </div>\r\n          <FileUpload\r\n            prevImages={prevImages}\r\n            updatePrevFilesCb={setPrevImages}\r\n            label='Add or Remove Images'\r\n            imagesLabel='New Images'\r\n            prevImagesLabel='Current Images'\r\n            multiple\r\n            accept='.jpg,.png,.jpeg'\r\n            updateFilesCb={setNewImages}\r\n          />\r\n          <div className={classes.buttonsWrapper}>\r\n            <Button\r\n              variant='contained'\r\n              color='primary'\r\n              startIcon={<Publish />}\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit Changes\r\n            </Button>\r\n            <Button\r\n              variant='contained'\r\n              className={classes.deleteButton}\r\n              startIcon={<DeleteForever />}\r\n              onClick={handleDelete}\r\n            >\r\n              Delete Vehicle\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <p>No vehicles to edit.</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Edit;\r\n","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\AdminPages\\Add\\index.js",["88","89","90"],"C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\AdminPages\\Inventory\\index.js",["91"],"import { Typography, makeStyles } from '@material-ui/core';\r\nimport { AdminContext } from '../../AdminContext';\r\nimport { useContext } from 'react';\r\nimport Table from './Table';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heading: {\r\n    fontFamily: theme.typography.jackFont,\r\n  },\r\n}));\r\n\r\nexport default function Inventory() {\r\n  const classes = useStyles();\r\n  const [inventory, setInventory] = useContext(AdminContext).inventory;\r\n  return (\r\n    <>\r\n      <Typography className={classes.heading} variant='h5'>\r\n        Current inventory\r\n      </Typography>\r\n      {Array.isArray(inventory) && inventory[0] ? (\r\n        <Table />\r\n      ) : (\r\n        <p>Inventory is empty.</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\FileUpload.js",["92","93"],"import { useState, useRef, useEffect, useContext } from 'react';\r\nimport { PhotoCamera, Close } from '@material-ui/icons';\r\nimport {\r\n  Button,\r\n  Card,\r\n  IconButton,\r\n  CardMedia,\r\n  makeStyles,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { imageGet } from '../../firebaseUtilities';\r\nimport { AdminContext } from './AdminContext';\r\nimport { Skeleton } from '@material-ui/lab';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  header: {\r\n    fontFamily: theme.typography.jackFont,\r\n  },\r\n  fileUploadContainer: {\r\n    marginTop: '2rem',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    width: '100%',\r\n  },\r\n  uploadSection: {\r\n    margin: '1rem 0',\r\n    position: 'relative',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    minWidth: '100%',\r\n    padding: ' 1rem',\r\n    border: '2px dotted lightgrey',\r\n  },\r\n  imageUploadHeader: {\r\n    fontFamily: theme.typography.jackFont,\r\n  },\r\n  input: {\r\n    backgroundColor: 'lightgrey',\r\n    fontSize: '18px',\r\n    display: 'block',\r\n    width: '100%',\r\n    border: 'none',\r\n    textTransform: 'none',\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    opacity: 0,\r\n\r\n    '&:focus': {\r\n      outline: 'none',\r\n    },\r\n  },\r\n  uploadedFilesContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    width: '100%',\r\n    padding: '1rem 0',\r\n  },\r\n  cardMedia: {\r\n    height: 180,\r\n    width: '100%',\r\n  },\r\n  progressContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  card: {\r\n    width: 270,\r\n  },\r\n  cardContainer: {\r\n    position: 'relative',\r\n    margin: '0.75rem',\r\n  },\r\n  imageDelete: {\r\n    backgroundColor: 'lightgrey',\r\n    position: 'absolute',\r\n    top: '-15px',\r\n    right: '-15px',\r\n  },\r\n}));\r\n\r\nexport default function FileUpload({\r\n  label,\r\n  prevImages,\r\n  updatePrevFilesCb,\r\n  imagesLabel,\r\n  prevImagesLabel,\r\n  updateFilesCb,\r\n  maxFileSizeInBytes = 5000000,\r\n  ...otherProps\r\n}) {\r\n  const fileInputField = useRef(null);\r\n  const [files, setFiles] = useState({});\r\n  const context = useContext(AdminContext);\r\n  const [inventory, setInventory] = context.inventory;\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setFiles({});\r\n  }, [inventory]);\r\n\r\n  const handleUploadClick = () => {\r\n    fileInputField.current.click();\r\n  };\r\n\r\n  const handleFileUpload = (e) => {\r\n    const { files: newFiles } = e.target;\r\n    if (newFiles.length) {\r\n      let updatedFiles = addNewFiles(newFiles);\r\n      setFiles(updatedFiles);\r\n      callUpdateFilesCb(updatedFiles);\r\n      console.log(files);\r\n    }\r\n  };\r\n\r\n  const addNewFiles = (newFiles) => {\r\n    for (let file of newFiles) {\r\n      if (file.size < maxFileSizeInBytes) {\r\n        if (!otherProps.multiple) {\r\n          return { file };\r\n        }\r\n        files[file.name] = file;\r\n      }\r\n    }\r\n    return { ...files };\r\n  };\r\n\r\n  const convertNestedObjectToArray = (nestedObj) => {\r\n    // Object.keys(nestedObj).map((key) => nestedObj[key]);\r\n    return Object.values(nestedObj);\r\n  };\r\n\r\n  const callUpdateFilesCb = (files) => {\r\n    const filesAsArray = convertNestedObjectToArray(files);\r\n    updateFilesCb(filesAsArray);\r\n  };\r\n\r\n  const removeFile = (fileName) => {\r\n    delete files[fileName];\r\n    setFiles({ ...files });\r\n    callUpdateFilesCb({ ...files });\r\n  };\r\n\r\n  function removePrevImage(imageName) {\r\n    const filteredImages = prevImages.filter((image) => image !== imageName);\r\n    updatePrevFilesCb(filteredImages);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.fileUploadContainer}>\r\n      <Typography variant='h5' className={classes.header}>\r\n        {label}\r\n      </Typography>\r\n      <section className={classes.uploadSection}>\r\n        <Typography>Drag and drop or</Typography>\r\n        <Button\r\n          variant='contained'\r\n          color='secondary'\r\n          startIcon={<PhotoCamera />}\r\n          onClick={handleUploadClick}\r\n        >\r\n          Upload\r\n        </Button>\r\n        <input\r\n          className={classes.input}\r\n          type='file'\r\n          ref={fileInputField}\r\n          onChange={handleFileUpload}\r\n          title=''\r\n          value=''\r\n          {...otherProps}\r\n        />\r\n      </section>\r\n\r\n      {files && Object.keys(files)[0] ? (\r\n        <>\r\n          <Typography className={classes.imageUploadHeader}>\r\n            {imagesLabel}:{' '}\r\n            {files && Object.keys(files)[0] ? Object.keys(files).length : 0}\r\n          </Typography>\r\n          <section className={classes.uploadedFilesContainer}>\r\n            {Object.keys(files).map((fileName) => {\r\n              const file = files[fileName];\r\n              return (\r\n                <ImageRender\r\n                  key={fileName}\r\n                  removeFile={removeFile}\r\n                  fileName={fileName}\r\n                  fileData={file}\r\n                />\r\n              );\r\n            })}\r\n          </section>\r\n        </>\r\n      ) : null}\r\n      {prevImages ? (\r\n        <>\r\n          <Typography className={classes.imageUploadHeader}>\r\n            {prevImagesLabel}: {prevImages.length}\r\n          </Typography>\r\n          <section className={classes.uploadedFilesContainer}>\r\n            {prevImages.map((image) => {\r\n              return (\r\n                <ImageRender\r\n                  isPrevImage\r\n                  key={image}\r\n                  removeFile={removePrevImage}\r\n                  fileName={image}\r\n                />\r\n              );\r\n            })}\r\n          </section>\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ImageRender({ removeFile, fileData, fileName, isPrevImage }) {\r\n  const classes = useStyles();\r\n\r\n  const [file, setFile] = useState();\r\n\r\n  useEffect(() => {\r\n    if (isPrevImage) {\r\n      // console.log(file);\r\n      imageGet(fileName).then((imgUrl) => {\r\n        setFile(imgUrl);\r\n      });\r\n    } else {\r\n      setFile(URL.createObjectURL(fileData));\r\n    }\r\n  }, [fileName]);\r\n\r\n  return (\r\n    <div className={classes.cardContainer}>\r\n      <Card className={classes.card}>\r\n        {file === undefined ? (\r\n          <Skeleton variant='rect' className={classes.cardMedia} />\r\n        ) : (\r\n          <CardMedia\r\n            className={classes.cardMedia}\r\n            image={file}\r\n            alt={`file preview ${fileName}`}\r\n          />\r\n        )}\r\n      </Card>\r\n      <IconButton\r\n        size='small'\r\n        className={classes.imageDelete}\r\n        onClick={() => removeFile(fileName)}\r\n      >\r\n        <Close />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\AuthSections\\AdminInterface\\AdminPages\\Inventory\\Table.js",["94","95","96","97","98","99"],"import { useState, useContext, useEffect } from 'react';\r\nimport {\r\n  makeStyles,\r\n  withStyles,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Collapse,\r\n  Box,\r\n  Card,\r\n  CardMedia,\r\n  Popper,\r\n  Paper,\r\n} from '@material-ui/core';\r\nimport { Skeleton } from '@material-ui/lab';\r\nimport {\r\n  KeyboardArrowUp,\r\n  KeyboardArrowDown,\r\n  Edit,\r\n  Visibility,\r\n  VisibilityOff,\r\n  DeleteForever,\r\n} from '@material-ui/icons';\r\nimport { AdminContext } from '../../AdminContext';\r\nimport firebase from '../../../../../firebase';\r\nimport { removeVehicle, pullInventory } from '../../../../firebaseUtilities';\r\nconst storage = firebase.storage();\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.black,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(4n+1)': {\r\n      backgroundColor: theme.palette.lightGrey.main,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableBody: {\r\n    // backgroundColor: theme.palette.lightGrey.main,\r\n  },\r\n  container: {\r\n    padding: '1rem 0',\r\n  },\r\n  pictureBox: {\r\n    display: 'flex',\r\n    flexDirection: 'row-reverse',\r\n    flexWrap: 'wrap',\r\n  },\r\n  pictureCard: {\r\n    margin: '0.4rem',\r\n  },\r\n  description: {\r\n    padding: '1rem',\r\n  },\r\n}));\r\n\r\nexport default function InventoryTable() {\r\n  const [inventory, setInventory] = useContext(AdminContext).inventory;\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <TableContainer className={classes.container}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Delete</StyledTableCell>\r\n            <StyledTableCell>Edit</StyledTableCell>\r\n            <StyledTableCell>Uploaded</StyledTableCell>\r\n            <StyledTableCell>Year</StyledTableCell>\r\n            <StyledTableCell>Make</StyledTableCell>\r\n            <StyledTableCell>Model</StyledTableCell>\r\n            <StyledTableCell>Price</StyledTableCell>\r\n            <StyledTableCell>Odometer</StyledTableCell>\r\n            <StyledTableCell>Description</StyledTableCell>\r\n            <StyledTableCell>Pictures</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody className={classes.tableBody}>\r\n          {inventory[0] ? (\r\n            inventory.map((car, i) => <Row car={car} key={i} />)\r\n          ) : (\r\n            <p>Loading Inventory...</p>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nfunction Row({ car }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [descOpen, setDescOpen] = useState(false);\r\n  const context = useContext(AdminContext);\r\n  const [editVehicle, setEditVehicle] = context.editVehicle;\r\n  const [location, setLocation] = context.location;\r\n  const [message, setMessage] = context.message;\r\n\r\n  function openEditor(e) {\r\n    e.preventDefault();\r\n    setEditVehicle(car);\r\n    setLocation('editVehicle');\r\n  }\r\n\r\n  async function handleDelete(e) {\r\n    const newMessage = await removeVehicle(car);\r\n    await pullInventory(context);\r\n    setMessage({ ...newMessage, open: true });\r\n  }\r\n  return (\r\n    <>\r\n      <StyledTableRow key={car.id} classes={classes.tableRow}>\r\n        <TableCell>\r\n          <IconButton\r\n            aria-label='Delete Vehicle'\r\n            size='small'\r\n            onClick={handleDelete}\r\n          >\r\n            <DeleteForever />\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell>\r\n          <IconButton\r\n            aria-label='Edit Vehicle'\r\n            size='small'\r\n            onClick={openEditor}\r\n          >\r\n            <Edit />\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell>{car.date}</TableCell>\r\n        <TableCell>{car.year}</TableCell>\r\n        <TableCell>{car.make}</TableCell>\r\n        <TableCell>{car.model}</TableCell>\r\n        <TableCell>{car.price}</TableCell>\r\n        <TableCell>{car.miles}</TableCell>\r\n        <TableCell>\r\n          {car.description ? (\r\n            <DescriptionPopup description={car.description} />\r\n          ) : (\r\n            'No description.'\r\n          )}\r\n        </TableCell>\r\n        <TableCell>\r\n          {car.images && car.images[0] ? (\r\n            <IconButton\r\n              aria-label='expand row'\r\n              size='small'\r\n              onClick={() => setOpen(!open)}\r\n            >\r\n              {open ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\r\n            </IconButton>\r\n          ) : (\r\n            'No pictures.'\r\n          )}\r\n        </TableCell>\r\n      </StyledTableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={10}>\r\n          <Collapse in={open} timeout='auto' unmountOnExit={true}>\r\n            <Box margin={1} className={classes.pictureBox}>\r\n              {car.images && car.images[0]\r\n                ? car.images.map((image) => {\r\n                    return <InventoryImage img={image} key={image} />;\r\n                  })\r\n                : null}\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </>\r\n  );\r\n}\r\nfunction InventoryImage({ img }) {\r\n  const classes = useStyles();\r\n  const [imgUrl, setImgUrl] = useState();\r\n  const height = 100;\r\n  const width = 100;\r\n  useEffect(() => {\r\n    storage\r\n      .ref(`${img}`)\r\n      .getDownloadURL()\r\n      .then((url) => setImgUrl(url))\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {imgUrl ? (\r\n        <Card className={classes.pictureCard}>\r\n          <CardMedia style={{ height: height, width: width }} image={imgUrl} />\r\n        </Card>\r\n      ) : (\r\n        <Skeleton\r\n          variant='rect'\r\n          className={classes.pictureCard}\r\n          width={width}\r\n          height={height}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction DescriptionPopup({ description }) {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  function handleClick(e) {\r\n    setAnchorEl(anchorEl ? null : e.currentTarget);\r\n  }\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? 'description' : undefined;\r\n\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        aria-describedby={id}\r\n        open={open}\r\n        type='button'\r\n        onClick={(e) => handleClick(e)}\r\n      >\r\n        {open ? <Visibility /> : <VisibilityOff />}\r\n      </IconButton>\r\n      <Popper id={id} open={open} anchorEl={anchorEl}>\r\n        <Paper className={classes.description}>{description}</Paper>\r\n      </Popper>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\codyc\\Documents\\@coding\\jacksadmin\\src\\components\\firebaseUtilities.js",["100"],"import firebase from '../firebase';\r\nimport uuid from 'uuid/dist/v4';\r\nimport { FilterCenterFocus } from '@material-ui/icons';\r\n\r\nconst fileExt = '_1500x1000';\r\n\r\nconst storage = firebase.storage();\r\nconst database = firebase.database();\r\nconst carDB = firebase.database().ref('cars/');\r\n\r\nexport async function imageGet(imageName) {\r\n  let imgUrl;\r\n  await storage\r\n    .ref(`${imageName}`)\r\n    .getDownloadURL()\r\n    .then((url) => {\r\n      imgUrl = url;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n  return imgUrl;\r\n}\r\n\r\nexport async function pullInventory(context) {\r\n  const [inventory, setInventory] = context.inventory;\r\n  const [editVehicle, setEditVehicle] = context.editVehicle;\r\n  return await firebase\r\n    .database()\r\n    .ref('cars/')\r\n    .get()\r\n    .then(async (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        console.log(snapshot.val());\r\n        const data = snapshot.val();\r\n        function getJsonData(data) {\r\n          const carsArray = Object.entries(data).map((entry) => {\r\n            return {\r\n              ...entry[1],\r\n              id: entry[0],\r\n            };\r\n          });\r\n          const carsArraywithImages = carsArray.map((car) => {\r\n            if (!car.images || car.images === []) {\r\n              return car;\r\n            } else {\r\n              const imagesArray = Object.values(car.images);\r\n              return {\r\n                ...car,\r\n                images: imagesArray,\r\n              };\r\n            }\r\n          });\r\n          return carsArraywithImages;\r\n        }\r\n        const jsonData = getJsonData(data);\r\n        await setInventory(jsonData);\r\n        await setEditVehicle(() => {\r\n          if (!editVehicle) return jsonData[0];\r\n          const vehicle = jsonData.find((car) => car.id === editVehicle.id);\r\n          if (vehicle === undefined) {\r\n            return jsonData[0];\r\n          } else return vehicle;\r\n        });\r\n      } else {\r\n        setInventory([]);\r\n        setEditVehicle({});\r\n        console.log(inventory);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(err.message);\r\n      setInventory([]);\r\n    });\r\n}\r\n\r\nexport async function update(newImages, editValues, prevImages, editVehicle) {\r\n  let messages = [];\r\n  try {\r\n    // Check if the form data and images are completely unchanged, then return a 'No changes' message if it is unchanged.\r\n    if (\r\n      editValues === editVehicle &&\r\n      (!newImages.length || !Array.isArray(newImages)) &&\r\n      prevImages === editVehicle.images\r\n    ) {\r\n      return {\r\n        severity: 'warning',\r\n        message: 'No changes made.',\r\n      };\r\n    }\r\n\r\n    // Check for changes to the Form Data portion of the car's data, then update the database if there are changes.\r\n    await updateFormData(editValues, editVehicle, messages);\r\n\r\n    // Check for changes (deletes) of the previous files, then delete from storage bucket and remove reference from database.\r\n    await deleteRemovedPreviousImages(prevImages, editVehicle, messages);\r\n\r\n    await uploadFiles(editVehicle.id, newImages, messages);\r\n\r\n    return {\r\n      severity: 'success',\r\n      message: messageBuilder(messages),\r\n    };\r\n  } catch (err) {\r\n    return {\r\n      severity: 'error',\r\n      message: err,\r\n    };\r\n  }\r\n}\r\n\r\nfunction getDifference(a1, a2) {\r\n  var a = [],\r\n    diff = [];\r\n\r\n  for (let i = 0; i < a1.length; i++) {\r\n    a[a1[i]] = true;\r\n  }\r\n\r\n  for (let i = 0; i < a2.length; i++) {\r\n    if (a[a2[i]]) {\r\n      delete a[a2[i]];\r\n    } else {\r\n      a[a2[i]] = true;\r\n    }\r\n  }\r\n\r\n  for (var k in a) {\r\n    diff.push(k);\r\n  }\r\n\r\n  return diff;\r\n}\r\n\r\nasync function deleteRemovedPreviousImages(prevImages, editVehicle, messages) {\r\n  if (prevImages === editVehicle.images) {\r\n    return;\r\n  }\r\n  const imagesToDelete = getDifference(prevImages, editVehicle.images);\r\n\r\n  // Get the database keys for all images related to the vehicle.\r\n  await database\r\n    .ref('cars/' + editVehicle.id + '/images')\r\n    .get()\r\n    .then(async (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        let imageRefs = Object.entries(snapshot.val()).map((image) => {\r\n          return {\r\n            id: image[0],\r\n            image: image[1],\r\n          };\r\n        });\r\n\r\n        // Get the keys for all images to be deleted.\r\n        const deleteKeys = imagesToDelete.map((image) => {\r\n          return imageRefs.find((ref) => ref.image === image);\r\n        });\r\n\r\n        // Construct an object to send as \"update\" payload in firebase.database.ref().update({payload}) function. This prevents sending multiple \"remove\" api calls.\r\n        let deleteObj = {};\r\n        deleteKeys.forEach((obj) => (deleteObj[obj.id] = null));\r\n\r\n        // Delete image refs via the update function.\r\n        await database\r\n          .ref('cars/' + editVehicle.id + '/images/')\r\n          .update(deleteObj, (err) => {\r\n            if (err) throw err.message;\r\n          });\r\n      }\r\n    });\r\n\r\n  // Delete each appropriate file from the Storage Bucket by mapping over the array of files to delete. (There is currently no method for deleting multiple files at once from a firebase storage bucket.)\r\n  await Promise.all(\r\n    imagesToDelete.map((imageName) =>\r\n      storage\r\n        .ref(imageName)\r\n        .delete()\r\n        .catch((err) => {\r\n          if (err) throw err.message;\r\n        })\r\n    )\r\n  );\r\n\r\n  messages.push('edited previous images');\r\n}\r\n\r\nasync function updateFormData(editValues, editVehicle, messages) {\r\n  const { id, images, ...newData } = editValues;\r\n  const { id: currentId, images: currentImages, ...currentData } = editVehicle;\r\n\r\n  console.log('datas');\r\n  console.log(currentData);\r\n  console.log(newData);\r\n  if (JSON.stringify(currentData) !== JSON.stringify(newData)) {\r\n    await database\r\n      .ref('cars/')\r\n      .child(editVehicle.id)\r\n      .update(newData, (err) => {\r\n        if (err) {\r\n          throw err.message;\r\n        }\r\n      });\r\n    messages.push('updated form data');\r\n  }\r\n}\r\n\r\nfunction messageBuilder(messageArray) {\r\n  const message = new Intl.ListFormat().format(messageArray);\r\n  const uppercaseMessage =\r\n    message.charAt(0).toUpperCase() + message.slice(1) + '.';\r\n  return uppercaseMessage;\r\n}\r\n\r\nasync function uploadFile(carId, image) {\r\n  const imgId = uuid();\r\n  try {\r\n    const fileRef = storage.ref().child(imgId);\r\n    fileRef\r\n      .put(image, (err) => {\r\n        if (err) throw err;\r\n      })\r\n      .then((upload) => {\r\n        console.log(upload);\r\n      });\r\n    await carDB.child(carId + '/images').push(imgId + fileExt, (err) => {\r\n      if (err) throw err;\r\n    });\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n}\r\n\r\nexport async function uploadFiles(carId, newImages, messages) {\r\n  if (!newImages.length || !Array.isArray(newImages)) return;\r\n  await Promise.all(\r\n    newImages.map((newFile) => {\r\n      return uploadFile(carId, newFile);\r\n    })\r\n  );\r\n  if (messages) {\r\n    messages.push('uploaded new images');\r\n  }\r\n}\r\n\r\nexport async function handleSubmit(e, uploadForm, images) {\r\n  const newKey = carDB.push().key;\r\n  const newDateObj = () => {\r\n    let newDate = new Date(Date.now());\r\n    let month = newDate.getMonth() + 1;\r\n    let day = newDate.getDate();\r\n    let year = newDate.getFullYear();\r\n    let formattedDate = `${month}/${day}/${year}`;\r\n    return formattedDate;\r\n  };\r\n  uploadForm.date = newDateObj();\r\n  return await carDB\r\n    .child(newKey)\r\n    .set(uploadForm, async (err) => {\r\n      if (err) {\r\n        throw err.message;\r\n      }\r\n    })\r\n    .then(async () => {\r\n      if (images) {\r\n        await Promise.all(\r\n          images.map((image) => uploadFile(newKey, image))\r\n        ).catch((err) => {\r\n          if (err) {\r\n            throw err.message;\r\n          }\r\n        });\r\n      } else return;\r\n    })\r\n    .then(() => {\r\n      return {\r\n        message: 'Successful upload!',\r\n        severity: 'success',\r\n      };\r\n    })\r\n    .catch((err) => {\r\n      return {\r\n        message: err,\r\n        severity: 'error',\r\n      };\r\n    });\r\n}\r\n\r\nexport async function removeVehicle(editVehicle) {\r\n  try {\r\n    await carDB.update(\r\n      {\r\n        [editVehicle.id]: null,\r\n      },\r\n      (err) => {\r\n        if (err) throw err.message;\r\n      }\r\n    );\r\n    // Check if vehicle has images, then delete if it does.\r\n    if (Array.isArray(editVehicle.images) && editVehicle.images[0]) {\r\n      await Promise.all(\r\n        editVehicle.images.map((imageName) =>\r\n          storage\r\n            .ref(imageName)\r\n            .delete()\r\n            .catch((err) => {\r\n              if (err) throw err.message;\r\n            })\r\n        )\r\n      );\r\n    }\r\n    return {\r\n      message: `Successfully deleted ${editVehicle.make} ${editVehicle.model}`,\r\n      severity: 'success',\r\n    };\r\n  } catch (err) {\r\n    return { message: err.message, severity: 'error' };\r\n  }\r\n}\r\n",{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":54,"column":6,"nodeType":"107","endLine":54,"endColumn":8,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":58,"column":10,"nodeType":"111","messageId":"112","endLine":58,"endColumn":21},{"ruleId":"109","severity":1,"message":"113","line":72,"column":10,"nodeType":"111","messageId":"112","endLine":72,"endColumn":18},{"ruleId":"109","severity":1,"message":"114","line":74,"column":21,"nodeType":"111","messageId":"112","endLine":74,"endColumn":33},{"ruleId":"109","severity":1,"message":"115","line":75,"column":10,"nodeType":"111","messageId":"112","endLine":75,"endColumn":17},{"ruleId":"109","severity":1,"message":"115","line":44,"column":10,"nodeType":"111","messageId":"112","endLine":44,"endColumn":17},{"ruleId":"109","severity":1,"message":"113","line":46,"column":10,"nodeType":"111","messageId":"112","endLine":46,"endColumn":18},{"ruleId":"109","severity":1,"message":"116","line":47,"column":10,"nodeType":"111","messageId":"112","endLine":47,"endColumn":17},{"ruleId":"109","severity":1,"message":"114","line":14,"column":21,"nodeType":"111","messageId":"112","endLine":14,"endColumn":33},{"ruleId":"109","severity":1,"message":"114","line":104,"column":21,"nodeType":"111","messageId":"112","endLine":104,"endColumn":33},{"ruleId":"105","severity":1,"message":"117","line":242,"column":6,"nodeType":"107","endLine":242,"endColumn":16,"suggestions":"118"},{"ruleId":"109","severity":1,"message":"114","line":72,"column":21,"nodeType":"111","messageId":"112","endLine":72,"endColumn":33},{"ruleId":"109","severity":1,"message":"119","line":107,"column":10,"nodeType":"111","messageId":"112","endLine":107,"endColumn":18},{"ruleId":"109","severity":1,"message":"120","line":107,"column":20,"nodeType":"111","messageId":"112","endLine":107,"endColumn":31},{"ruleId":"109","severity":1,"message":"121","line":109,"column":10,"nodeType":"111","messageId":"112","endLine":109,"endColumn":21},{"ruleId":"109","severity":1,"message":"113","line":110,"column":10,"nodeType":"111","messageId":"112","endLine":110,"endColumn":18},{"ruleId":"109","severity":1,"message":"115","line":111,"column":10,"nodeType":"111","messageId":"112","endLine":111,"endColumn":17},{"ruleId":"109","severity":1,"message":"122","line":3,"column":10,"nodeType":"111","messageId":"112","endLine":3,"endColumn":27},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.","ArrayExpression",["125"],"no-unused-vars","'credentials' is assigned a value but never used.","Identifier","unusedVar","'location' is assigned a value but never used.","'setInventory' is assigned a value but never used.","'message' is assigned a value but never used.","'loading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fileData' and 'isPrevImage'. Either include them or remove the dependency array. If 'setFile' needs the current value of 'fileData', you can also switch to useReducer instead of useState and read 'fileData' in the reducer.",["126"],"'descOpen' is assigned a value but never used.","'setDescOpen' is assigned a value but never used.","'editVehicle' is assigned a value but never used.","'FilterCenterFocus' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [store]",{"range":"131","text":"132"},"Update the dependencies array to be: [fileData, fileName, isPrevImage]",{"range":"133","text":"134"},[1504,1506],"[store]",[6088,6098],"[fileData, fileName, isPrevImage]"]